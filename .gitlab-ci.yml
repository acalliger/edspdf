image: harbor.eds.aphp.fr/public/python:3.8-slim

stages:
  - test
  - documentation
  - pages
  - package
  - deploy

Linting:
  stage: test
  cache:
    - key:
        files:
          - .pre-commit-config.yaml
      paths:
        - ~/.pre-commit
  before_script:
    - apt-get update
    - apt-get install -y --no-install-recommends git
    - pip install pre-commit
  script:
    - pre-commit run --all-files

Running Pytest:
  stage: test
  cache:
    - key:
        files:
          - poetry.lock
      paths:
        - .venv
  before_script:
    - apt-get update
    - apt-get install -y --no-install-recommends poppler-utils
    - pip install poetry
    - poetry config virtualenvs.in-project true
    - poetry install
  script:
    - poetry run pytest tests --cov edspdf --junitxml=report.xml
  after_script:
    - poetry run coverage xml -o coverage.xml
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"
  artifacts:
    when: always
    paths:
      - coverage.xml
      - report.xml
    reports:
      junit: report.xml
      cobertura: coverage.xml
  rules:
    - changes:
        - tests/**
        - edspdf/**
        - .gitlab-ci.yml
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

Installation:
  stage: test
  script:
    - pip install .
  rules:
    - changes:
        - pyproject.toml
        - edspdf/**
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

Build documentation:
  stage: documentation
  cache:
    - key:
        files:
          - poetry.lock
      paths:
        - .venv
  before_script:
    - pip install poetry
    - poetry config virtualenvs.in-project true
    - poetry install
  script:
    - poetry run mkdocs build --site-dir documentation
  artifacts:
    paths:
      - documentation
  rules:
    - changes:
        - docs/**
        - mkdocs.yml
        - .gitlab-ci.yml
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

pages:
  stage: pages
  script:
    - mv documentation public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

Package:
  stage: package
  before_script:
    - pip install poetry
    - poetry config repositories.gitlab ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    - poetry config http-basic.gitlab gitlab-ci-token ${CI_JOB_TOKEN}
  script:
    - poetry publish --build -r gitlab
  only:
    - tags
